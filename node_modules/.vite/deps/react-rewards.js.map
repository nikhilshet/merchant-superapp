{
  "version": 3,
  "sources": ["../../react-rewards/src/functions/helpers.ts", "../../react-rewards/src/components/Confetti/Confetti.ts", "../../react-rewards/src/components/Emoji/Emoji.ts", "../../react-rewards/src/components/Balloons/Balloons.ts", "../../react-rewards/src/hooks/useReward.ts"],
  "sourcesContent": ["import { AnimateFunction } from './helpers.types';\n\nexport const animate: AnimateFunction = ({\n  root,\n  particles,\n  decay,\n  rotate,\n  lifetime,\n  fps,\n  updateParticle,\n  onFinish,\n}) => {\n  const totalTicks = lifetime;\n  let tick = 0;\n  let lastTime = 0;\n  const interval = 1000 / fps;\n\n  const update = (timestamp: number) => {\n    if (!lastTime) lastTime = timestamp;\n\n    const elapsed = timestamp - lastTime;\n\n    if (elapsed >= interval) {\n      lastTime = timestamp - (elapsed % interval);\n\n      particles.forEach((particle) =>\n        updateParticle(particle, tick / totalTicks, decay, rotate)\n      );\n\n      tick += 1;\n\n      if (tick >= totalTicks) {\n        particles.forEach((particle) => {\n          if (particle.element.parentNode === root) {\n            root.removeChild(particle.element);\n          }\n        });\n        onFinish();\n        return;\n      }\n    }\n\n    window.requestAnimationFrame(update);\n  };\n\n  window.requestAnimationFrame(update);\n};\n\nexport const { PI } = Math;\n\nexport const degreesToRadians = (degrees: number) => degrees * (PI / 180);\n\nexport const getRandomInt = (min: number, max: number) => {\n  const minVal = Math.ceil(min);\n  const maxVal = Math.floor(max);\n  return Math.floor(Math.random() * (maxVal - minVal)) + minVal;\n};\n\nexport const generatePhysics = (\n  angle: number,\n  spread: number,\n  startVelocity: number,\n  differentiator: number\n) => {\n  const radAngle = degreesToRadians(angle);\n  const radSpread = degreesToRadians(spread);\n  const { random } = Math;\n  return {\n    x: 0,\n    y: 0,\n    z: 0,\n    height: 0,\n    wobble: random() * 10,\n    velocity: startVelocity * 0.5 + random() * startVelocity,\n    angle2D: -radAngle + (0.5 * radSpread - random() * radSpread),\n    angle3D: -(PI / 4) + random() * (PI / 2),\n    tiltAngle: random() * PI,\n    differentiator,\n  };\n};\n\nexport const getContainerById = (id: string) => {\n  const container = document.getElementById(id);\n  if (!container) {\n    console.error(\n      `Element with an ID of ${id} could not be found. Please provide a valid ID.`\n    );\n  }\n  return container;\n};\n", "import { ConfettiConfig } from './Confetti.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\n\nconst defaultColors = ['#A45BF1', '#25C6F6', '#72F753', '#F76C88', '#F5F770'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  colors: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.style['background-color'] = colors[index % colors.length];\n    element.style.width = `${elementSize}px`;\n    element.style.height = `${elementSize}px`;\n    element.style.position = position;\n    element.style.zIndex = `${zIndex}`;\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const {\n    x,\n    y,\n    tiltAngle,\n    wobble,\n    angle2D,\n    angle3D,\n    velocity,\n    differentiator,\n  } = particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * velocity;\n  particle.physics.y += Math.sin(angle2D) * velocity;\n  particle.physics.z += Math.sin(angle3D) * velocity;\n  particle.physics.wobble += 0.05;\n  particle.physics.velocity *= decay;\n  particle.physics.y += 3.5;\n  particle.physics.tiltAngle += 0.15;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * (differentiator % 2 ? Math.sin(wobble / 4) : Math.cos(wobble / 4)));\n\n  const wobbleY = y + 5 * Math.sin(wobble);\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${wobbleY}px, 0) rotate3d(1, 1, 1, ${\n    differentiator % 2 ? tiltAngle : -1 * tiltAngle\n  }rad)`;\n  particle.element.style.scale = `${1 - 0.2 * progress}`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const confetti = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: ConfettiConfig\n) => {\n  const options = config || {};\n  const {\n    elementCount = 50,\n    elementSize = 8,\n    colors = defaultColors,\n    angle = 90,\n    spread = 45,\n    decay = 0.94,\n    lifetime = 200,\n    startVelocity = 35,\n    zIndex = 0,\n    position = 'fixed',\n    fps = 60,\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    colors\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({\n    root,\n    particles,\n    decay,\n    lifetime,\n    fps,\n    updateParticle,\n    onFinish,\n  });\n};\n", "import { EmojiConfig } from './Emoji.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\n\nconst defaultEmoji = ['ðŸ¤“', 'ðŸ˜Š', 'ðŸ¥³'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  emojis: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.innerHTML = emojis[index % emojis.length];\n    element.style.fontSize = `${elementSize + getRandomInt(0, 4)}px`;\n    element.style.position = position;\n    element.style.zIndex = `${zIndex}`;\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number,\n  rotate?: boolean\n) => {\n  const { x, y, tiltAngle, angle2D, velocity, differentiator, wobble } =\n    particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * velocity;\n  particle.physics.y += Math.sin(angle2D) * velocity;\n  particle.physics.wobble += 0;\n  particle.physics.velocity *= decay;\n  particle.physics.y += 5;\n  particle.physics.tiltAngle += 0.05;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * Math.sin(wobble / 4));\n\n  const translateStyle = `translate3d(${wobbleX}px, ${y}px, 0)`;\n\n  const rotateStyle = rotate\n    ? `rotate3d(0, 0, 1, ${differentiator % 2 ? tiltAngle : -1 * tiltAngle}rad)`\n    : '';\n\n  particle.element.style.transform = [translateStyle, rotateStyle]\n    .filter(Boolean)\n    .join(' ');\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const emoji = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: EmojiConfig\n) => {\n  const options = config || {};\n  const {\n    elementCount = 20,\n    elementSize = 25,\n    emoji: emojiArray = defaultEmoji,\n    angle = 90,\n    spread = 45,\n    decay = 0.94,\n    lifetime = 200,\n    startVelocity = 35,\n    zIndex = 0,\n    position = 'fixed',\n    rotate = true,\n    fps = 60,\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    emojiArray\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({\n    root,\n    particles,\n    decay,\n    rotate,\n    lifetime,\n    fps,\n    updateParticle,\n    onFinish,\n  });\n};\n", "import { BalloonsConfig } from './Balloons.types';\nimport {\n  animate,\n  generatePhysics,\n  getRandomInt,\n} from '../../functions/helpers';\nimport { Particle } from '../../Main.types';\nimport balloon from './balloon.svg';\n\nconst defaultColors = ['#A45BF1', '#25C6F6', '#72F753', '#F76C88', '#F5F770'];\nconst factors = [-0.6, -0.3, 0, 0.3, 0.6];\n\nconst handlePopBalloon = (\n  event: MouseEvent,\n  element: Element,\n  root: Element\n) => {\n  if (element.parentNode === root) {\n    root.removeChild(element);\n  }\n};\n\nconst createElements = (\n  root: Element,\n  elementCount: number,\n  elementSize: number,\n  zIndex: number,\n  position: string,\n  colors: string[]\n) =>\n  Array.from({ length: elementCount }).map((_, index) => {\n    const element = document.createElement('span');\n    element.innerHTML = balloon;\n    element.style.width = `${elementSize}px`;\n    element.style.position = position;\n    element.style.color = colors[index % colors.length];\n    element.style.zIndex = `${zIndex}`;\n    element.addEventListener(\n      'click',\n      (event: MouseEvent) => {\n        handlePopBalloon(event, element, root);\n      },\n      { once: true }\n    );\n    root.appendChild(element);\n    return { element, differentiator: getRandomInt(0, factors.length) };\n  });\n\nconst updateParticle = (\n  particle: Particle,\n  progress: number,\n  decay: number\n) => {\n  const { x, y, tiltAngle, angle2D, velocity, differentiator, wobble } =\n    particle.physics;\n\n  particle.physics.x += Math.cos(angle2D) * 0.5 * velocity;\n  particle.physics.y += Math.sin(angle2D) * 0.5 * velocity;\n  particle.physics.wobble += 0;\n  particle.physics.velocity *= decay;\n  particle.physics.tiltAngle += 0.1;\n\n  const wobbleX =\n    x +\n    (factors[differentiator] * progress * wobble * wobble +\n      20 * Math.sin(wobble));\n\n  particle.element.style.transform = `translate3d(${wobbleX}px, ${y}px, 0) rotate3d(0, 0, 1, ${\n    differentiator % 2\n      ? Math.sin(tiltAngle / 4) / 3\n      : Math.cos(tiltAngle / 4) / 3\n  }rad)`;\n  particle.element.style.scale = `${1 - 0.2 * progress}`;\n\n  if (progress > 0.5) {\n    particle.element.style.opacity = `${2 - 2 * progress}`;\n  }\n};\n\nexport const balloons = (\n  root: Element,\n  internalAnimatingCallback: () => void,\n  config?: BalloonsConfig\n) => {\n  const options = config || {};\n  const {\n    angle = 90,\n    decay = 0.999,\n    spread = 50,\n    startVelocity = 3,\n    elementCount = 10,\n    elementSize = 20,\n    lifetime = 600,\n    zIndex = 0,\n    position = 'fixed',\n    colors = defaultColors,\n    fps = 60,\n    onAnimationComplete,\n  } = options;\n  const spanElements = createElements(\n    root,\n    elementCount,\n    elementSize,\n    zIndex,\n    position,\n    colors\n  );\n  const particles = spanElements.map(({ element, differentiator }) => ({\n    element,\n    physics: generatePhysics(angle, spread, startVelocity, differentiator),\n  }));\n\n  const onFinish = () => {\n    if (typeof onAnimationComplete === 'function') {\n      onAnimationComplete();\n    }\n    internalAnimatingCallback();\n  };\n\n  animate({ root, particles, decay, lifetime, fps, updateParticle, onFinish });\n};\n", "import { useCallback, useState } from 'react';\nimport { confetti } from '../components/Confetti/Confetti';\nimport { emoji } from '../components/Emoji/Emoji';\nimport { balloons } from '../components/Balloons/Balloons';\nimport { UseRewardType } from './useReward.types';\nimport { getContainerById } from '../functions/helpers';\n\nexport const useReward: UseRewardType = (id, type, config) => {\n  const [isAnimating, setIsAnimating] = useState<boolean>(false);\n\n  const internalAnimatingCallback = () => {\n    setIsAnimating(false);\n  };\n\n  const reward = useCallback(() => {\n    const foundContainer = getContainerById(id);\n    if (!foundContainer) return;\n    setIsAnimating(true);\n    switch (type) {\n      case 'confetti':\n        confetti(foundContainer, internalAnimatingCallback, config);\n        break;\n      case 'emoji':\n        emoji(foundContainer, internalAnimatingCallback, config);\n        break;\n      case 'balloons':\n        balloons(foundContainer, internalAnimatingCallback, config);\n        break;\n      default:\n        console.error(`${type} is not a valid react-rewards type.`);\n    }\n  }, [config, id, type]);\n\n  return { reward, isAnimating };\n};\n"],
  "mappings": "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",
  "names": ["animate", "root", "particles", "decay", "rotate", "lifetime", "fps", "updateParticle", "onFinish", "totalTicks", "tick", "lastTime", "interval", "update", "timestamp", "elapsed", "particle", "PI", "degreesToRadians", "degrees", "getRandomInt", "min", "max", "minVal", "maxVal", "generatePhysics", "angle", "spread", "startVelocity", "differentiator", "radAngle", "radSpread", "random", "getContainerById", "id", "container", "defaultColors", "factors", "createElements", "elementCount", "elementSize", "zIndex", "position", "colors", "_", "index", "element", "progress", "x", "y", "tiltAngle", "wobble", "angle2D", "angle3D", "velocity", "wobbleX", "wobbleY", "confetti", "internalAnimatingCallback", "config", "options", "onAnimationComplete", "defaultEmoji", "emojis", "translateStyle", "rotateStyle", "emoji", "emojiArray", "handlePopBalloon", "event", "balloon", "balloons", "useReward", "type", "isAnimating", "setIsAnimating", "useState", "useCallback", "foundContainer"]
}
